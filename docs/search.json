[
  {
    "objectID": "TrackOverview.html",
    "href": "TrackOverview.html",
    "title": "Sicily Sailing GPS track summary",
    "section": "",
    "text": "Track loading and formatting\nThe xml file with the navionics tracks is parsed.\n\nCoordinates, time and speed are extracted.\nSpeed is converted from m/s to knots\nCOG is calculated as consecutive bearings from a thinned 10min dataset\nDistance is calculated for generated for the total distance and cumulative per day\n\n\n\nCode\n# temp &lt;- tempfile(fileext = \".zip\")\n# download.file(\"https://drive.google.com/drive/folders/1FlAM74hAPtFC3qIcZF5nQ03UK-WP3hZc&export=download\",\n#   temp)\n# out &lt;- unzip(temp, exdir = tempdir())\n# gpx_parsed &lt;- htmlTreeParse(file = out[14], useInternalNodes = TRUE)\n\ngpx_parsed &lt;- htmlTreeParse(file = \"Sicily2021Tracks\", useInternalNodes = TRUE)\n\ncoords &lt;- xpathSApply(doc = gpx_parsed, path = \"//trkpt\", fun = xmlAttrs)\nelevation &lt;- xpathSApply(doc = gpx_parsed, path = \"//trkpt/ele\", fun = xmlValue)\ndate_time &lt;- xpathSApply(doc = gpx_parsed, path = \"//trkpt/time\", fun = xmlValue)\nspeed &lt;- xpathSApply(doc = gpx_parsed, path = \"//trkpt/extensions/navionics_speed\", fun = xmlValue)\n\n\ndf &lt;- data.frame(\n  lat = as.numeric(coords[\"lat\", ]),\n  lon = as.numeric(coords[\"lon\", ]),\n  elevation = as.numeric(elevation),\n  date = lubridate::as_date(date_time),\n  time = lubridate::parse_date_time(date_time, \"Y-m-d*H:M:S\"),\n  kts = as.numeric(speed) * 1.944) |&gt; # convert from m/s to knots \n  mutate(\n    dist_segment = track_distance(lat, lon) / 1852, # convert from meters to nm\n  )\ndf$dist_segment[1] &lt;- 0\n\n# outlier check\noutlier &lt;- which(df$dist_segment &gt; .5)\noutlier_area &lt;- c(outlier, outlier-1) |&gt; sort()\n\ndf &lt;- df |&gt;\n  mutate(dist = cumsum(dist_segment) |&gt; round(digits = 1)) |&gt;\n  group_by(date) |&gt;\n  mutate(dist_day = cumsum(dist_segment) |&gt; round(digits = 1)) |&gt; \n  ungroup()\n\ndf_1min &lt;- df |&gt;\n  dplyr::filter(second(time) &lt; 1) |&gt;\n  mutate(cog = track_bearing(lat, lon),\n         cog = ifelse(cog &lt; 0, cog + 360, cog)\n  )\n\ndf_10min &lt;- df |&gt;\n  dplyr::filter(second(time) &lt;1, minute(time) %% 10 == 0) |&gt;\n  mutate(cog = track_bearing(lat, lon),\n         cog = ifelse(cog &lt; 0, cog + 360, cog)\n         )\n\n\n\nhideexample lines\n\n\n\n\n\n\n\nCode\nhead(df, 5)\n\n\n# A tibble: 5 × 9\n    lat   lon elevation date       time                  kts dist_segment  dist\n  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;dttm&gt;              &lt;dbl&gt;        &lt;dbl&gt; &lt;dbl&gt;\n1  38.2  14.8        48 2021-10-03 2021-10-03 08:16:54  2.60      0           0\n2  38.2  14.8        44 2021-10-03 2021-10-03 08:16:55  4.49      0.0223      0\n3  38.2  14.8        57 2021-10-03 2021-10-03 08:16:55  4.49      0.00890     0\n4  38.2  14.8        46 2021-10-03 2021-10-03 08:16:56  1.94      0.00313     0\n5  38.2  14.8        50 2021-10-03 2021-10-03 08:16:58  2.43      0.00277     0\n# ℹ 1 more variable: dist_day &lt;dbl&gt;\n\n\nCode\ntail(df, 5)\n\n\n# A tibble: 5 × 9\n    lat   lon elevation date       time                  kts dist_segment  dist\n  &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt; &lt;date&gt;     &lt;dttm&gt;              &lt;dbl&gt;        &lt;dbl&gt; &lt;dbl&gt;\n1  38.2  14.8        44 2021-10-08 2021-10-08 15:24:03     0    0.000240   195.\n2  38.2  14.8        44 2021-10-08 2021-10-08 15:24:04     0    0.0000597  195.\n3  38.2  14.8        45 2021-10-08 2021-10-08 15:24:05     0    0.000119   195.\n4  38.2  14.8        44 2021-10-08 2021-10-08 15:24:06     0    0.0000597  195.\n5  38.2  14.8        44 2021-10-08 2021-10-08 15:24:07     0    0          195.\n# ℹ 1 more variable: dist_day &lt;dbl&gt;\n\n\n\n\n\nExtract full hour data.\n\n\nCode\ndf_1hour &lt;- df_10min |&gt; mutate(hour = hour(time)) |&gt;\n  group_by(date, hour) |&gt;\n  slice(1) |&gt;\n  ungroup() |&gt; arrange(time)\n  #dplyr::filter(minute(time) == 0, second(time) &lt; 1) \n\n\n\n\nOverview plot\nBlue markers are the positions at the full hour for approximate logbook entries. Red markers show beginning and end of missing segments.\n\nMinute wise dataFull data\n\n\n\n\nCode\nleaflet() |&gt;\n  addTiles() |&gt;\n  addPolylines(data = df_1min, lat = ~lat, lng = ~lon, \n               color = \"#000000\", opacity = 0.8, weight = 3) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df_1hour, lat = ~lat, lng = ~lon, label = ~as.character(hour(time))) |&gt;\n  leaflet::addAwesomeMarkers(data = df[outlier_area, ], lat = ~lat, lng = ~lon,\n                               label = ~as.character(hour(time)), \n                             icon = awesomeIcons(icon = 'ios-close', \n                                                 iconColor = 'black',\n                                                 library = 'ion',\n                                                 markerColor = 'red')) \n\n\n\n\n\n\n\n\n\n\nCode\nleaflet() |&gt;\n  addTiles() |&gt;\n  addPolylines(data = df, lat = ~lat, lng = ~lon, \n               color = \"#000000\", opacity = 0.8, weight = 3) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df_1hour, lat = ~lat, lng = ~lon, label = ~as.character(hour)) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df[outlier_area, ], lat = ~lat, lng = ~lon,\n    label = ~as.character(hour(time)), \n    icon = awesomeIcons(icon = 'ios-close', iconColor = 'black',\n                        library = 'ion', markerColor = 'red'))\n\n\n\n\n\n\n\n\n\n\n\nHourly log book\n\n\nCode\ndf_1hour |&gt;\n  mutate(latitude = deg2dms(lat, type = \"cat\"),\n         longitude = deg2dms(lon, type = \"cat\"),\n         # add distance\n         across(c(cog, kts, dist), \\(x) round(x, 1))\n         ) |&gt;\n  select(date, time, latitude, longitude, cog, kts, dist_day, dist) |&gt;\n  gt::gt(groupname_col = \"date\", row_group_as_column = TRUE) |&gt;\n  gt::opt_interactive()\n\n\n\n\n\n\n\n\n\n\n\nCOG\n\n10 min thinning1min thinning\n\n\n\n\nCode\ndf_10min |&gt;\n  ggplot(aes(x = time, y = cog)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndf_1min |&gt;\n  ggplot(aes(x = time, y = cog)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDistance\nChecking Cumulative Miles in total and per day. The full track shows missing segments, marked in red in the full data route above.\n\n10 min thinningfull data\n\n\n\n\nCode\ndf_10min |&gt;\n  ggplot(aes(x = time, y = dist)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\nCode\ndf_10min |&gt;\n  ggplot(aes(x = time, y = dist_day)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\n\n\nmissing segments\n\n\nCode\ndf |&gt;\n  ggplot(aes(x = time, y = dist_segment)) + geom_point() + geom_line()"
  }
]