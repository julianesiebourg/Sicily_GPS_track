[
  {
    "objectID": "TrackOverview.html",
    "href": "TrackOverview.html",
    "title": "Sicily Sailing GPS track summary",
    "section": "",
    "text": "Navionics GPs track of the Sicily eolian island trip.\n\nHideTrack loading and data formatting\n\n\n\n\n\nThe xml file with the navionics tracks is parsed.\n\nCoordinates, time and speed are extracted.\nSpeed is converted from m/s to knots\nDistance is calculated from thinned 1min segment data for the total distance and cumulative per day\nCOG is calculated as consecutive bearings from a thinned 10min segment dataset\n\n\n\nCode\n# temp &lt;- tempfile(fileext = \".zip\")\n# download.file(\"https://drive.google.com/drive/folders/1FlAM74hAPtFC3qIcZF5nQ03UK-WP3hZc&export=download\",\n#   temp)\n# out &lt;- unzip(temp, exdir = tempdir())\n# gpx_parsed &lt;- htmlTreeParse(file = out[14], useInternalNodes = TRUE)\n\ngpx_parsed &lt;- htmlTreeParse(file = \"Sicily2021Tracks\", useInternalNodes = TRUE)\n\ncoords &lt;- xpathSApply(doc = gpx_parsed, path = \"//trkpt\", fun = xmlAttrs)\nelevation &lt;- xpathSApply(doc = gpx_parsed, path = \"//trkpt/ele\", fun = xmlValue)\ndate_time &lt;- xpathSApply(doc = gpx_parsed, path = \"//trkpt/time\", fun = xmlValue)\nspeed &lt;- xpathSApply(doc = gpx_parsed, path = \"//trkpt/extensions/navionics_speed\", fun = xmlValue)\n\n\ndf &lt;- data.frame(\n  lat = as.numeric(coords[\"lat\", ]),\n  lon = as.numeric(coords[\"lon\", ]),\n  elevation = as.numeric(elevation),\n  date = lubridate::as_date(date_time),\n  time = lubridate::parse_date_time(date_time, \"Y-m-d*H:M:S\") + hours(2), #switch timezone\n  kts = as.numeric(speed) * 1.944) |&gt; # convert from m/s to knots \n  mutate(\n    dist_segment = track_distance(lat, lon) / 1852, # convert from meters to nm\n  )\n# outlier check\noutlier &lt;- which(df$dist_segment &gt; .5)\noutlier_area &lt;- c(outlier, outlier-1) |&gt; sort()\n\ndf_1min &lt;- df |&gt;\n  dplyr::filter(second(time) &lt; 1) |&gt;\n  mutate(cog = track_bearing(lat, lon),\n         cog = ifelse(cog &lt; 0, cog + 360, cog)\n  ) |&gt;\n  mutate(\n    dist_segment = track_distance(lat, lon) / 1852, # convert from meters to nm\n  )\ndf_1min$dist_segment[1] &lt;- 0\ndf_1min &lt;- df_1min |&gt;\n  mutate(dist = cumsum(dist_segment) |&gt; round(digits = 1)) |&gt;\n  group_by(date) |&gt;\n  mutate(dist_day = cumsum(dist_segment) |&gt; round(digits = 1)) |&gt; \n  ungroup()\n\ndf_10min &lt;- df_1min |&gt;\n  dplyr::filter(second(time) &lt;1, minute(time) %% 10 == 0) |&gt;\n  mutate(cog = track_bearing(lat, lon),\n         cog = ifelse(cog &lt; 0, cog + 360, cog)) \n\n\n\nexample lines\n\n\nCode\nhead(df, 5)\n\n\n       lat      lon elevation       date                time     kts\n1 38.15578 14.77282        48 2021-10-03 2021-10-03 10:16:54 2.60496\n2 38.15582 14.77245        44 2021-10-03 2021-10-03 10:16:55 4.49064\n3 38.15591 14.77257        57 2021-10-03 2021-10-03 10:16:55 4.49064\n4 38.15587 14.77253        46 2021-10-03 2021-10-03 10:16:56 1.94400\n5 38.15592 14.77252        50 2021-10-03 2021-10-03 10:16:58 2.43000\n  dist_segment\n1           NA\n2  0.022317834\n3  0.008898046\n4  0.003125085\n5  0.002768580\n\n\nCode\ntail(df, 5)\n\n\n            lat     lon elevation       date                time kts\n230251 38.15554 14.7731        44 2021-10-08 2021-10-08 17:24:03   0\n230252 38.15554 14.7731        44 2021-10-08 2021-10-08 17:24:04   0\n230253 38.15554 14.7731        45 2021-10-08 2021-10-08 17:24:05   0\n230254 38.15554 14.7731        44 2021-10-08 2021-10-08 17:24:06   0\n230255 38.15554 14.7731        44 2021-10-08 2021-10-08 17:24:07   0\n       dist_segment\n230251 2.400859e-04\n230252 5.974434e-05\n230253 1.194887e-04\n230254 5.974434e-05\n230255 0.000000e+00\n\n\nExtract full hour data.\n\n\nCode\ndf_1hour &lt;- df_10min |&gt; mutate(hour = hour(time)) |&gt;\n  group_by(date, hour) |&gt;\n  slice(1) |&gt;\n  ungroup() |&gt; arrange(time)\n  #dplyr::filter(minute(time) == 0, second(time) &lt; 1) \n\n\n\n\n\n\n\nTrip overview\n\nBlue markers are the positions at the full hour for approximate logbook entries.\nRed markers show beginning and end of missing segments.\n\n\nMinute wise dataFull data\n\n\n\n\nCode\nleaflet() |&gt;\n  addTiles() |&gt;\n  addPolylines(data = df_1min, lat = ~lat, lng = ~lon, \n               color = \"#000000\", opacity = 0.8, weight = 3) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df_1hour, lat = ~lat, lng = ~lon, label = ~as.character(hour(time))) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df[outlier_area, ], lat = ~lat, lng = ~lon,\n    label = ~as.character(hour(time)), \n    icon = awesomeIcons(icon = 'ios-close', iconColor = 'black',\n                        library = 'ion', markerColor = 'red')) \n\n\n\n\n\n\n\n\n\n\nCode\nleaflet() |&gt;\n  addTiles() |&gt;\n  addPolylines(data = df, lat = ~lat, lng = ~lon, \n               color = \"#000000\", opacity = 0.8, weight = 3) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df_1hour, lat = ~lat, lng = ~lon, label = ~as.character(hour)) |&gt;\n  leaflet::addAwesomeMarkers(\n    data = df[outlier_area, ], lat = ~lat, lng = ~lon,\n    label = ~as.character(hour(time)), \n    icon = awesomeIcons(icon = 'ios-close', iconColor = 'black',\n                        library = 'ion', markerColor = 'red'))\n\n\n\n\n\n\n\n\n\n\n\nHourly log book\n\n\nCode\ndf_1hour |&gt;\n  mutate(latitude = deg2dms(lat, type = \"cat\"),\n         longitude = deg2dms(lon, type = \"cat\"),\n         # add distance\n         across(c(cog, kts, dist), \\(x) round(x, 1))\n         ) |&gt;\n  mutate(time = sprintf(\"%02d:%02d\", hour(time), minute(time)),\n         date = str_remove(as.character(date), \"^[0-9]*-\"))|&gt;\n  select(date, time, latitude, longitude, cog, kts, dist_day, dist) |&gt;\n  gt::gt() |&gt;\n  gt::opt_interactive(use_text_wrapping = FALSE) |&gt;\n  gt::cols_width(dplyr::any_of(c(\"latitude\", \"longitude\")) ~ gt::px(130))\n\n\n\n\n\n\n\n\n\n\n\nCOG\n\n10 min thinning1 min thinning\n\n\n\n\nCode\ndf_10min |&gt;\n  ggplot(aes(x = time, y = cog)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndf_1min |&gt;\n  ggplot(aes(x = time, y = cog)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDistance\nChecking Cumulative Miles in total and per day. The full track shows missing segments, marked in red in the full data route above.\n\n10 min thinningfull data\n\n\n\n\nCode\ndf_10min |&gt;\n  ggplot(aes(x = time, y = dist)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\nCode\ndf_10min |&gt;\n  ggplot(aes(x = time, y = dist_day)) + geom_point() + geom_line()\n\n\n\n\n\n\n\n\n\n\n\nmissing segments\n\n\nCode\ndf |&gt;\n  ggplot(aes(x = time, y = dist_segment)) + geom_point() + geom_line()"
  }
]